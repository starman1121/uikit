{"version":3,"file":"main.2977e218752e0f442b56.hot-update.js","sources":["webpack:///./src/widgets/Menu/Menu.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled, {DefaultTheme} from \"styled-components\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport throttle from \"lodash/throttle\";\r\nimport Overlay from \"../../components/Overlay/Overlay\";\r\nimport Flex from \"../../components/Box/Flex\";\r\nimport { useMatchBreakpoints } from \"../../hooks\";\r\nimport Logo from \"./components/Logo\";\r\nimport Panel from \"./components/Panel\";\r\nimport { NavProps } from \"./types\";\r\nimport { MENU_HEIGHT, SUBNAV_LINK_HEIGHT, MENU_ENTRY_HEIGHT, SIDEBAR_WIDTH_REDUCED, SIDEBAR_WIDTH_FULL } from \"./config\";\r\nimport { LinkLabel, LinkStatus, MenuEntry } from \"./components/MenuEntry\";\r\nimport MenuLink from \"./components/MenuLink\";\r\nimport { SvgProps } from \"../../components/Svg\";\r\nimport * as IconModule from \"./icons\";\r\nimport treePriceUsd from \"./components/TreasurePrice\";\r\nimport SubNavPrice from \"./components/SubNavPrice\";\r\nimport SubNavThemeSwitcher from \"./components/SubNavThemeSwitcher\";\r\nimport LangSelector from \"./components/LangSelector\";\r\nconst Icons = IconModule as unknown as { [key: string]: React.FC<SvgProps> };\r\n\r\nexport interface Props {\r\n  isActive?: boolean;\r\n  primaryMenu?: boolean;\r\n  theme: DefaultTheme;\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledNav = styled.nav<{ primaryMenu: boolean, isHome: boolean }>`\r\n  position: fixed;\r\n  top: 0px;\r\n  left: 0;\r\n  transition: top 0.2s;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding-left: 8px;\r\n  padding-right: 16px;\r\n  width: 100%;\r\n  height: ${MENU_HEIGHT}px;\r\n  box-shadow: ${({ primaryMenu }) => (primaryMenu ? `none` : `0 0 20px 0 rgb(18 24 58 / 15%)`)};\r\n  // background-color: ${({ isHome, theme }) => isHome ? 'transparent' : theme.nav.background};\r\n  background-color: ${({ primaryMenu, theme }) => primaryMenu ? 'transparent' : theme.nav.background};\r\n  z-index: 20;\r\n  transform: translate3d(0, 0, 0);\r\n`;\r\n\r\nconst BodyWrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n`;\r\n\r\nconst Inner = styled.div<{ isPushed: boolean; showMenu: boolean, isHome: boolean }>`\r\n  flex-grow: 1;\r\n  margin-top: ${({ isHome, showMenu }) => (isHome ? 0 : showMenu ? `${MENU_HEIGHT}px` : 0)};\r\n  transition: margin-top 0.2s, margin-left 0.2s cubic-bezier(0.4, 0, 0.2, 1);\r\n  transform: translate3d(0, 0, 0);\r\n  max-width: 100%;\r\n\r\n  // ${({ theme }) => theme.mediaQueries.nav} {\r\n  //   margin-left: ${({ isPushed }) => `${isPushed ? SIDEBAR_WIDTH_FULL : SIDEBAR_WIDTH_REDUCED}px`};\r\n  //   max-width: ${({ isPushed }) => `calc(100% - ${isPushed ? SIDEBAR_WIDTH_FULL : SIDEBAR_WIDTH_REDUCED}px)`};\r\n  // }\r\n  ${({ theme }) => theme.mediaQueries.nav} {\r\n    margin-left: 0;\r\n    max-width: 100%;\r\n  }\r\n`;\r\n\r\nconst MobileOnlyOverlay = styled(Overlay)`\r\n  position: fixed;\r\n  height: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.nav} {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst SubNavContainer = styled.div`\r\n  width: 80%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nconst ConnectContainer = styled.div`\r\n  display: flex;\r\n  width: fit-content;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst StyledLinkContainer = styled.div`\r\n  display: none;\r\n  padding-top: 4px;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n  width: 100%;\r\n  min-width: 400px;\r\n  max-width: 900px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    width: 100%;\r\n    display: flex;\r\n  }\r\n`;\r\n\r\nconst StyledNavLink = styled.div<Props>`\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  letter-spacing: 1px;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  align-items: center;\r\n  height: ${SUBNAV_LINK_HEIGHT}px;\r\n  color: ${({ isActive, primaryMenu, theme }) => (primaryMenu ? `#FFFFFF` : isActive ? theme.colors.textActive : theme.colors.textInActive)};\r\n  // border-bottom: 4px solid;\r\n  // border-bottom-color: ${({ isActive, theme }) => (isActive ? theme.colors.primaryBright : \"transparent\")};\r\n  // box-shadow: ${({ isActive, theme }) => (isActive ? `0px 4px 0px ${theme.colors.primaryBright}` : \"none\")};\r\n\r\n  &:hover {\r\n    color: ${({ theme }) => (theme.colors.textActive)};\r\n  }\r\n`;\r\n\r\nconst StyledNavLinkLabel = styled.div`\r\n  transition: color 0.4s;\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst Menu: React.FC<NavProps> = ({\r\n  userMenu,\r\n  globalMenu,\r\n  isDark,\r\n  toggleTheme,\r\n  langs,\r\n  setLang,\r\n  currentLang,\r\n  treePriceUsd,\r\n  activeItem,\r\n  activeSubItem,\r\n  links,\r\n  children,\r\n}) => {\r\n  // const { isMobile, isTablet } = useMatchBreakpoints();\r\n  // const isSmallerScreen = isMobile || isTablet;\r\n  const { isXl } = useMatchBreakpoints();\r\n  const isMobile = isXl === false;\r\n  const [isPushed, setIsPushed] = useState(false);\r\n  const [primaryMenu, setPrimaryMenu] = useState(false);\r\n  const refPrevOffset = useRef(window.pageYOffset);\r\n  const location = useLocation();\r\n  // const isHome = location.pathname === '/';\r\n  const isHome = true\r\n  useEffect(() => {\r\n    if (isHome) {\r\n      setPrimaryMenu(true);\r\n    } else {\r\n      setPrimaryMenu(false);\r\n    }\r\n    const handleScroll = () => {\r\n      const currentOffset = window.pageYOffset;\r\n      const isBottomOfPage = window.document.body.clientHeight === currentOffset + window.innerHeight;\r\n      const isTopOfPage = currentOffset === 0;\r\n      // Always show the menu when user reach the top\r\n      if (isTopOfPage && isHome) {\r\n        setPrimaryMenu(true);\r\n      } else {\r\n        setPrimaryMenu(false);\r\n      }\r\n    };\r\n    const throttledHandleScroll = throttle(handleScroll, 200);\r\n\r\n    window.addEventListener(\"scroll\", throttledHandleScroll);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", throttledHandleScroll);\r\n    };\r\n  }, [isHome]);\r\n\r\n  // Find the home link if provided\r\n  const homeLink = links.find((link) => link.label === \"Home\");\r\n\r\n  // Close the menu when a user clicks a link on mobile\r\n  const handleClick = isMobile ? () => setIsPushed(false) : undefined;\r\n \r\n  return (\r\n    <Wrapper>\r\n      <StyledNav primaryMenu={primaryMenu} isHome={isHome}>\r\n        <Logo\r\n          isPushed={isPushed}\r\n          isDark={isDark}\r\n          primaryMenu={primaryMenu}\r\n          togglePush={() => setIsPushed((prevState: boolean) => !prevState)}\r\n          href={homeLink?.href ?? \"/\"}\r\n        />\r\n        <SubNavContainer>\r\n          <StyledLinkContainer>\r\n            {\r\n              links.map(entry => {\r\n                return (\r\n                  <StyledNavLink key={entry.href} isActive={entry.href === activeItem || entry.href === activeSubItem} primaryMenu={primaryMenu}>\r\n                    <MenuLink href={entry.href}>\r\n                      <StyledNavLinkLabel>{entry.label}</StyledNavLinkLabel>\r\n                    </MenuLink>\r\n                  </StyledNavLink>\r\n                )\r\n              })\r\n            }\r\n          </StyledLinkContainer>\r\n          <ConnectContainer>\r\n            <Flex>\r\n              <SubNavThemeSwitcher isDark={!isDark} toggleTheme={toggleTheme} />\r\n              <LangSelector currentLang={currentLang} langs={langs} setLang={setLang} />\r\n            </Flex>\r\n            <Flex>\r\n              <SubNavPrice treePriceUsd={treePriceUsd} />\r\n              {userMenu}\r\n            </Flex>\r\n          </ConnectContainer>\r\n        </SubNavContainer>\r\n      </StyledNav>\r\n     \r\n      <BodyWrapper>\r\n        <Panel\r\n          isPushed={isPushed}\r\n          isMobile={isMobile}\r\n          showMenu={true}\r\n          isDark={isDark}\r\n          toggleTheme={toggleTheme}\r\n          langs={langs}\r\n          setLang={setLang}\r\n          currentLang={currentLang}\r\n          treePriceUsd={treePriceUsd}\r\n          pushNav={setIsPushed}\r\n          links={links}\r\n        />\r\n        \r\n        <Inner isPushed={isPushed} showMenu={true} isHome={isHome}>\r\n          {children}\r\n        </Inner>\r\n        <MobileOnlyOverlay show={isPushed} onClick={() => setIsPushed(false)} role=\"presentation\" />\r\n      </BodyWrapper>\r\n     \r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;;;AACA;AAQA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAIA;AAaA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAOA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AADA;AAMA;AAVA;AAaA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AADA;AALA;AAdA;AARA;AAmCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBA;AApCA;AA2DA;AACA;AApHA;AAqHA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}