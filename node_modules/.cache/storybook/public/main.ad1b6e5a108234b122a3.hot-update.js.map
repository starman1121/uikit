{"version":3,"file":"main.ad1b6e5a108234b122a3.hot-update.js","sources":["webpack:///./src/widgets/Menu/components/UserMenu/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { usePopper } from \"react-popper\";\r\nimport styled from \"styled-components\";\r\nimport Flex from \"../../../../components/Box/Flex\";\r\nimport { ChevronDownIcon } from \"../../../../components/Svg\";\r\nimport isTouchDevice from \"../../../../util/isTouchDevice\";\r\nimport { UserMenuProps, variants } from \"./types\";\r\nimport MenuIcon from \"./MenuIcon\";\r\nimport { UserMenuItem } from \"./styles\";\r\n// import useMatchBreakpoints from \"./useMatchBreakpoints\";\r\n\r\nconst StyledUserMenu = styled(Flex)`\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border-radius: 6px;\r\n  // box-shadow: inset 0px -2px 0px rgba(0, 0, 0, 0.1);\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  height: 42px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: relative;\r\n\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`;\r\n\r\nconst LabelText = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  font-weight: 600;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    display: block;\r\n    margin-left: 8px;\r\n    margin-right: 8px;\r\n  }\r\n`;\r\n\r\nconst Menu = styled.div<{ isOpen: boolean }>`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 16px;\r\n  padding-bottom: 4px;\r\n  padding-top: 4px;\r\n  pointer-events: auto;\r\n  width: 280px;\r\n  visibility: visible;\r\n  z-index: 1001;\r\n\r\n  ${({ isOpen }) =>\r\n    !isOpen &&\r\n    `\r\n    pointer-events: none;\r\n    visibility: hidden;\r\n  `}\r\n\r\n  ${UserMenuItem}:first-child {\r\n    border-radius: 8px 8px 0 0;\r\n  }\r\n\r\n  ${UserMenuItem}:last-child {\r\n    border-radius: 0 0 8px 8px;\r\n  }\r\n`;\r\n\r\nconst UserMenu: React.FC<UserMenuProps> = ({\r\n  account,\r\n  text,\r\n  avatarSrc,\r\n  variant = variants.DEFAULT,\r\n  children,\r\n  onUserMenuModal,\r\n  ...props\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [targetRef, setTargetRef] = useState<HTMLDivElement | null>(null);\r\n  const [tooltipRef, setTooltipRef] = useState<HTMLDivElement | null>(null);\r\n  const hideTimeout = useRef<number>();\r\n  const isHoveringOverTooltip = useRef(false);\r\n  // const { isMobile } = useMatchBreakpoints();\r\n  const accountEllipsis = account ? `${account.substring(0, 6)}...${account.substring(account.length - 4)}` : null;\r\n  const { styles, attributes } = usePopper(targetRef, tooltipRef, {\r\n    placement: \"bottom-end\",\r\n    modifiers: [{ name: \"offset\", options: { offset: [0, 12] } }],\r\n  });\r\n\r\n  /**\r\n   * See \"useTooltip\"\r\n   */\r\n  useEffect(() => {\r\n    const showTooltip = (evt: MouseEvent | TouchEvent) => {\r\n      setIsOpen(true);\r\n\r\n      if (evt.target === targetRef) {\r\n        clearTimeout(hideTimeout.current);\r\n      }\r\n\r\n      if (evt.target === tooltipRef) {\r\n        isHoveringOverTooltip.current = true;\r\n      }\r\n    };\r\n\r\n    const hideTooltip = (evt: MouseEvent | TouchEvent) => {\r\n      if (hideTimeout.current) {\r\n        window.clearTimeout(hideTimeout.current);\r\n      }\r\n\r\n      if (evt.target === tooltipRef) {\r\n        isHoveringOverTooltip.current = false;\r\n      }\r\n\r\n      if (!isHoveringOverTooltip.current) {\r\n        hideTimeout.current = window.setTimeout(() => {\r\n          if (!isHoveringOverTooltip.current) {\r\n            setIsOpen(false);\r\n          }\r\n        }, 150);\r\n      }\r\n    };\r\n\r\n    const toggleTouch = (evt: TouchEvent) => {\r\n      const target = evt.target as Node;\r\n      const isTouchingTargetRef = target && targetRef?.contains(target);\r\n      const isTouchingTooltipRef = target && tooltipRef?.contains(target);\r\n\r\n      if (isTouchingTargetRef) {\r\n        setIsOpen((prevOpen) => !prevOpen);\r\n      } else if (isTouchingTooltipRef) {\r\n        // Don't close the menu immediately so it catches the event\r\n        setTimeout(() => {\r\n          setIsOpen(false);\r\n        }, 100);\r\n      } else {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    if (isTouchDevice()) {\r\n      document.addEventListener(\"touchstart\", toggleTouch);\r\n    } else {\r\n      targetRef?.addEventListener(\"mouseenter\", showTooltip);\r\n      targetRef?.addEventListener(\"mouseleave\", hideTooltip);\r\n      tooltipRef?.addEventListener(\"mouseenter\", showTooltip);\r\n      tooltipRef?.addEventListener(\"mouseleave\", hideTooltip);\r\n    }\r\n\r\n    return () => {\r\n      if (isTouchDevice()) {\r\n        document.removeEventListener(\"touchstart\", toggleTouch);\r\n      } else {\r\n        targetRef?.removeEventListener(\"mouseenter\", showTooltip);\r\n        targetRef?.removeEventListener(\"mouseleave\", hideTooltip);\r\n        tooltipRef?.removeEventListener(\"mouseenter\", showTooltip);\r\n        tooltipRef?.removeEventListener(\"mouseleave\", hideTooltip);\r\n      }\r\n    };\r\n  }, [targetRef, tooltipRef, hideTimeout, isHoveringOverTooltip, setIsOpen]);\r\n\r\n  return (\r\n    <>\r\n      <StyledUserMenu onClick={onUserMenuModal} {...props}>\r\n        {/* <MenuIcon avatarSrc={avatarSrc} variant={variant} /> */}\r\n        <LabelText title={text || account}>{text || accountEllipsis}</LabelText>\r\n        {/* <ChevronDownIcon color=\"text\" width=\"24px\" /> */}\r\n      </StyledUserMenu>\r\n      {/* <Menu style={styles.popper} ref={setTooltipRef} {...attributes.popper} isOpen={isOpen}>\r\n        {children}\r\n      </Menu> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserMenu;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AAAA;AAAA;AACA;AAeA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAFA;AADA;AAWA;AACA;AACA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}