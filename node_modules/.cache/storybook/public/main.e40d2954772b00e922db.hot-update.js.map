{"version":3,"file":"main.e40d2954772b00e922db.hot-update.js","sources":["webpack:///./src/widgets/Menu/components/PanelBody.tsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { SvgProps } from \"../../../components/Svg\";\r\nimport * as IconModule from \"../icons\";\r\nimport Accordion from \"./Accordion\";\r\nimport { MenuEntry, LinkLabel, LinkStatus } from \"./MenuEntry\";\r\nimport MenuLink from \"./MenuLink\";\r\nimport { PanelProps, PushedProps } from \"../types\";\r\n\r\ninterface Props extends PanelProps, PushedProps {\r\n  isMobile: boolean;\r\n}\r\n\r\nconst Icons = IconModule as unknown as { [key: string]: React.FC<SvgProps> };\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  height: 100%;\r\n`;\r\n\r\nconst PanelBody: React.FC<Props> = ({ isPushed, pushNav, isMobile, links }) => {\r\n  const location = useLocation();\r\n  console.log(\"panelbody location\", location)\r\n\r\n  // Close the menu when a user clicks a link on mobile\r\n  const handleClick = isMobile ? () => pushNav(false) : undefined;\r\n\r\n  return (\r\n    <Container>\r\n      {links.map((entry) => {\r\n        const Icon = Icons[entry.icon];\r\n        const iconElement = <Icon width=\"24px\" mr=\"8px\" />;\r\n        const calloutClass = entry.calloutClass ? entry.calloutClass : undefined;\r\n\r\n        if (entry.items) {\r\n          const itemsMatchIndex = entry.items.findIndex((item) => item.href === location.pathname);\r\n          const initialOpenState = entry.initialOpenState === true ? entry.initialOpenState : itemsMatchIndex >= 0;\r\n\r\n          return (\r\n            <Accordion\r\n              key={entry.label}\r\n              isPushed={isPushed}\r\n              pushNav={pushNav}\r\n              icon={iconElement}\r\n              label={entry.label}\r\n              status={entry.status}\r\n              initialOpenState={initialOpenState}\r\n              className={calloutClass}\r\n              isActive={entry.items.some((item) => item.href === location.pathname)}\r\n            >\r\n              {isPushed &&\r\n                entry.items.map((item) => (\r\n                  <MenuEntry key={item.href} secondary isActive={item.href === location.pathname} onClick={handleClick}>\r\n                    <MenuLink href={item.href}>\r\n                      <LinkLabel isPushed={isPushed}>{item.label}</LinkLabel>\r\n                      {item.status && (\r\n                        <LinkStatus color={item.status.color} fontSize=\"14px\">\r\n                          {item.status.text}\r\n                        </LinkStatus>\r\n                      )}\r\n                    </MenuLink>\r\n                  </MenuEntry>\r\n                ))}\r\n            </Accordion>\r\n          );\r\n        }\r\n        return (\r\n          <MenuEntry key={entry.label} isActive={entry.href === location.pathname} className={calloutClass}>\r\n            <MenuLink href={entry.href} onClick={handleClick}>\r\n              {/* {iconElement} */}\r\n              <LinkLabel isActive={entry.href === location.pathname}>{entry.label}</LinkLabel>\r\n              {entry.status && (\r\n                <LinkStatus color={entry.status.color} fontSize=\"14px\">\r\n                  {entry.status.text}\r\n                </LinkStatus>\r\n              )}\r\n            </MenuLink>\r\n          </MenuEntry>\r\n        );\r\n      })}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PanelBody;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAOA;AAEA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAYA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAHA;AADA;AADA;AAZA;AA0BA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAJA;AADA;AAYA;AAnDA;AAsDA;AACA;AA/DA;AAgEA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}